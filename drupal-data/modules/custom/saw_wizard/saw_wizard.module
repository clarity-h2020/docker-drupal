<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormBase;
use Drupal\Core\Ajax\AjaxResponse;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\Core\Ajax\ReplaceCommand;
use Drupal\Core\Ajax\RedirectCommand;
use Drupal\Core\Ajax\InsertCommand;
use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\Core\Entity\ContentEntityForm;
use Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use \Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use \Drupal\Core\Entity\EntityFormInterface;


function saw_wizard_entity_view_alter( &$build, $entity, $display, $view_mode){
  
  $wizardable_entities = array('node', 'group','media',);

  $entity_type = $entity->getEntityTypeId();
  
  if(in_array($entity_type,$wizardable_entities )) {
    $current_path = \Drupal::service('path.current')->getPath();
    $route_name = Url::fromUserInput($current_path)->getRouteName();
    $route_parameters = Url::fromUserInput($current_path)->getrouteParameters();
    $route_name_parts = explode('.',$route_name);
    

    switch ($entity_type) {
      case 'taxonomy_term' :
        $type = 'taxonomy_term';
        break;
      case 'taxonomy_vocabulary' :
        $type = 'taxonomy_vocabulary';
        break;
      default:
        $type = $entity_type.'_type';
        break;
    }
      
    // get config 
    $bundle = $entity->bundle();
    
    $config = \Drupal::config('saw_wizard.settings');
    $hasWizard = $config->get();
    // are there settings for current node type?
    if(isset($hasWizard[$entity_type][$bundle])) {
      $stored_wizard = $config->get($entity_type.'.'.$bundle);
      
    } else {
      return;
    }
    
    if($stored_wizard['active']==1){
  
      $build['#attached']['library'][]='saw_wizard/wizard-menu';
      
      // on wich position of the wizard are we?
      $current_mode = $display->getMode();

      // is current form mode in wizard definition?
      if(array_key_exists($current_mode,$stored_wizard['steps']) && saw_wizard_is_step_used($stored_wizard["steps"], $current_mode)) {
        $navpattern = 'view_mode_page.display_entity';
        $navparams = array(
          'view_mode' => $current_mode,
          'entity_type' => $entity_type,
          'entity_id' => $entity->id(),
        );

        $node_id = $entity->id();
        $path = saw_wizard_get_step_path($stored_wizard["steps"], $current_mode);
        $tree = saw_wizard_get_step_tree($stored_wizard["steps"]);
        
        $build['actions']= array(
          '#type'=> 'container',
          '#attributes' => array('class' => 'wizard-actions',),
          '#weight' => 100000,
        );
        // create prec and next links
          $prev = saw_wizard_get_neightbour($tree, $path, $current_mode, -1, false);
          $next = saw_wizard_get_neightbour($tree, $path, $current_mode, 1, false);
          
          if( $prev != ''){
            if($prev != 'default') {
              $navparams['view_mode']  = $prev;

              $previous_link=str_replace('//','/',Url::fromRoute($navpattern,$navparams)->toString());
            } else {
              $previous_link=str_replace('//','/',Url::fromRoute('entity.'.$entity_type.'.canonical', array($entity_type => $entity->id()))->toString());
            }
            
          // we have a previous step so make the link
            $build['actions']['prev'] =[
              '#type'=> 'html_tag',
              '#tag'=> 'a',
              '#value'=>'previous',
              '#attributes'=>array('href'=>$previous_link, 
              'class'=>'wizard-prev'),
              '#weight'=> -1,
             ];
          }

          if($current_mode != 'default') {
            $editmode = '.'.$current_mode;
          } else {
            $editmode = '';
          }
          $edit_link = Url::fromRoute('entity.'.$entity_type.'.edit_form'.$editmode,[$entity_type => $node_id]);

          $build['actions']['edit'] =[
              '#type'=> 'html_tag',
              '#tag'=> 'a',
              '#value'=>'edit',
              '#attributes'=>array('href'=>$edit_link->toString()."?destination=".\Drupal::service('path.current')->getPath(), 
              'class'=>'wizard-edit'),
              '#weight'=> 50,
             ];

        if($next != '')  {
          if($next != 'default') {
            $navparams['view_mode']  = $next;
            $next_link=str_replace('//','/',Url::fromRoute($navpattern,$navparams)->toString());
            } else {
              $next_link=str_replace('//','/',Url::fromRoute('entity.'.$entity_type.'.canonical', array($entity_type => $entity->id()))->toString());
          }
        
        // we have a next step so make the button
          $build['actions']['next'] =[
              '#type'=> 'html_tag',
              '#tag'=> 'a',
              '#value'=>'next',
              '#attributes'=>array('href'=>$next_link, 
              'class'=>'wizard-next'),
              '#weight'=> 100, 
             ];
        }

      $navparams['view_mode']  = $current_mode;
          if ($stored_wizard['nav_type'] == 0){
            $class = array('wizard', 'nav-menu');
          } else {
            $class = array('wizard', 'nav-tree');
          }
          // create the wizard nav on top
          $build['stepnav']=[
            '#theme' => 'item_list',
            '#list_type' => 'ul',
            '#title' => '',
            '#items' => saw_wizard_create_nav($navpattern, $tree['used']['substeps'], $path.'/'.$current_mode, $navparams,'view'),
            '#attributes' => ['class' => $class],
            '#wrapper_attributes' => ['class' => 'wizard_container clearfix',],
            '#weight'=> -20,
            '#cache'=>array('max_age'=>0),
          ];
      }
    }
  }
  
  


}


function saw_wizard_form_alter(&$form, &$form_state, $form_id){
  $wizardable_entities = array('node', 'group','media',);
  
  //'taxonomy_vocabulary','taxonomy_term'
 /* $current_path = \Drupal::service('path.current')->getPath();
    $route_name = Url::fromUserInput($current_path)->getRouteName();
    $route_parameters = Url::fromUserInput($current_path)->getrouteParameters();
  kint($route_name);
    kint($route_parameters);*/
 
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof EntityFormInterface) {
    $entity_type = $form_object->getEntity()->getEntityTypeId();
    $bundle = $form_object->getEntity()->bundle();
  } else {
    $entity_type = FALSE;
  }

  if($entity_type && in_array($entity_type,$wizardable_entities)) {
    $current_path = \Drupal::service('path.current')->getPath();
    $route_name = Url::fromUserInput($current_path)->getRouteName();
    $route_parameters = Url::fromUserInput($current_path)->getrouteParameters();
    $route_name_parts = explode('.',$route_name);
    
    switch ($entity_type) {
      case 'taxonomy_term' :
        $type = 'taxonomy_term';
        break;
      case 'taxonomy_vocabulary' :
        $type = 'taxonomy_vocabulary';
        break;
      default:
        $type = $entity_type.'_type';
        break;
    }
    
    
    // get config 
    $config = \Drupal::config('saw_wizard.settings');
    $hasWizard = $config->get();

    // are there settings for current entity type?
    if(isset($hasWizard[$entity_type][$bundle])) {
      $stored_wizard = $config->get($entity_type.'.'.$bundle);
    } else {
      return;
    }

    // is wizard is set active?
    if($stored_wizard['active']==1){
  
      // create theme sugestion for form Id so we can style the steps by twig
      $theme_suggestion= str_replace('_form','', 'form__'.$form['#form_id']);
      $form['#theme'][]=$theme_suggestion;
      //$form['#theme'][]='form__wizard_step';

   
   
      // prepare Form and formstate
      unset($form['actions']['preview']);
      unset($form['actions']['delete']);
      $form['#attached']['library'][]='saw_wizard/wizard-menu';
    
      // on wich position of the wizard are we?
      
      $current_mode = saw_wizard_get_current_form($route_name_parts);
      // to reload step after submit
      $form_state->set('wizard',$current_mode);
   
    
    
    
      // is current form mode in wizard definition?
      if(array_key_exists($current_mode,$stored_wizard['steps']) && saw_wizard_is_step_used($stored_wizard["steps"], $current_mode)) {
      
        $path = saw_wizard_get_step_path($stored_wizard["steps"], $current_mode);
        $tree = saw_wizard_get_step_tree($stored_wizard["steps"]);
      
        $navpattern = saw_wizard_get_base_route($route_name_parts);
      
        //Do we have an already created node?
        $entity_id = $form_state->getFormObject()->getEntity()->id();
        if($entity_id){
      // create prev and next links
          $prev = saw_wizard_get_neightbour($tree, $path, $current_mode, -1, false);
          $next = saw_wizard_get_neightbour($tree, $path, $current_mode, 1, false);
                   
          if( $prev != ''){
            if($prev != 'default') {
              $prev = '.'.$prev;
            } else {
              $prev ='';
            }
            $form_state->set('wizard_prev',$navpattern.$prev);

          // we have a previous step so make the button
            //$previous_link= str_replace('{step}',$prev,$navpattern);
            $form['actions']['prev_button'] =[
              '#type' => "submit",
              '#value' => 'Previous',
              '#submit' => array(
                "::submitForm",
                "::save",
                "saw_wizard_prev",
              ),
              '#button_type' => "primary",
              '#weight' => -2,
            ];
          }
        
        if($next != '')  {
          if($next != 'default') {
            $next = '.'.$next;
          } else {
            $next = '';
          }
          $form_state->set('wizard_next',$navpattern  .$next);
        // we have a next step so make the button
          //$next_link=str_replace('{step}',$next,$navpattern);
          $form['actions']['next_button'] =[
            '#type' => "submit",
            '#value' => 'Next',
            '#submit' => array(
                "::submitForm",
                "::save",
                "saw_wizard_next",
              ),
            '#button_type' => "primary",
            '#weight' => 101,
          ];
        }

        // create the wizard nav on top
         if ($stored_wizard['nav_type'] == 0){
          $class = array('wizard', 'nav-menu');
        } else {
          $class = array('wizard', 'nav-tree');
        }
        $form['stepnav']=[
          '#theme' => 'item_list',
          '#list_type' => 'ul',
          '#title' => '',
          '#items' => saw_wizard_create_nav($navpattern, $tree['used']['substeps'], $path.'/'.$current_mode, $route_parameters),
          '#attributes' => ['class' => $class],
          '#wrapper_attributes' => ['class' => 'wizard_container clearfix',],
          '#weight'=> -20,
          '#cache'=>array('max_age'=>0),
        ];
        
        // remove the submithandler and save by ajax
        //$form['actions']['submit']['#ajax']['callback']="saw_wizard_save_ajax";
        unset($form['actions']['submit']['#submit']);
        
        
      } else {
        // we have no node id so we are creating a node (and are hopefully on step1)
        // load the second step after submit
        $form_state->set('wizard',saw_wizard_get_neightbour($tree, $path, $current_mode, 1, false));
      }
      
      // call submit function to redirect to the correct step after submit
      $form['actions']['submit']['#submit'][]="saw_wizard_node_form_submit";
    }
  }

  }

  
  
}

function saw_wizard_get_current_form($route_parts) {
  $form_mode = $route_parts[count($route_parts)-1];
  
  switch ($form_mode) {
    case 'add':
    case 'add_form':
    case 'edit_form':
      return 'default';
      break;
    default:
      return $form_mode;
      break;
  }
}

function saw_wizard_get_base_route($route_parts) {
  $form_mode = $route_parts[count($route_parts)-1];
  
  switch ($form_mode) {
    case 'add':
    case 'add_form':
    case 'edit_form':
      
      break;
    default:
      array_pop($route_parts);
      break;
  }
  return implode('.', $route_parts);
}


/*
 * Creates an array tree from the "flat" wizard array
 */
function saw_wizard_get_step_tree($wizard, $parent = ''){
  $branch = array();
  foreach($wizard as $stepname=>$step){
    if($step['parent'] == $parent){
      $substeps = saw_wizard_get_step_tree($wizard, $stepname);
      if ($substeps) {
        $step['substeps'] = $substeps;
        uasort($step['substeps'],'saw_wizard_sort_steps');
      }
      $branch[$stepname] = $step;
    }
  }
  return $branch;
}


/*
 * Creates a path path (/level1/level2/.../parent_to step) to a specific step from the "flat" wizard array
 */
function saw_wizard_get_step_path($flat_wizard, $step) {
  $path = '';
  $parent= $flat_wizard[$step];
  do{
    $path = '/'.$parent['parent'].$path;
    $parent = $flat_wizard[$parent['parent']];
  }while($parent['parent'] !='');
  return $path;
}

function saw_wizard_is_step_used($flat_wizard, $step){
  $path = explode("/",saw_wizard_get_step_path($flat_wizard, $step));
  if($path[1]=="used"){
    return TRUE;
  } else {
    return FALSE;
  }
}


/*
 * Get Step for prev and next navigation from a given step
 * tree: the wizard in as tree array 
 * path: the path to the steps parent
 * step: stepname
 * direction: -1 for previous +1 for next
 * ignore_substeps: if true the function ignores levels below current level
 */
function saw_wizard_get_neightbour($tree, $path, $step, $direction, $ignore_substeps=false){


  $me = saw_get_path($tree, $path.'/'.$step);
  $parent = saw_get_path($tree, $path);

  
  if (isset($me['substeps']) && $direction == 1 && $ignore_substeps == false){
    // if step has children and we move forward and we will not ignore substeps next step is first child
    $applicants = array_keys($me['substeps']);
    return $applicants[0];
  }
  
  
  // get all siblings of the step 
  $applicants = array_keys($parent['substeps']);
  
  // get the index of the step an move in direction
  $target= array_search($step,$applicants) + $direction;
  
  
  if(-1 < $target &&  $target< count($applicants)) {
    // we have a sibling before and after the step

    if ($direction == -1 && $ignore_substeps == false) {
      //we move back and we do not ignore sublevels
      
      if(isset($parent['substeps'][$applicants[$target]]['substeps'])){
        //step befor has substeps
        $new_path = $path.'/'.$applicants[$target];
        $leftofme = saw_get_path($tree, $new_path);
        while (isset($leftofme['substeps'])) {
          $applicants = array_keys($leftofme['substeps']);
          $target = count($applicants)-1;
          $new_path = $new_path.'/'.$applicants[$target];
          $leftofme = saw_get_path($tree, $new_path);
        } 
      }
    } 
      return $applicants[$target];
    
    
  } else {
  
    $levels = explode('/',$path);
    $level_before = array_pop($levels);
    $new_path = implode('/',$levels);
   
    if ($direction < 0){
      // we move back
      
      if ( $level_before != 'used') {
        // The previous step of the first step in a level is its parent
        return $level_before;
      } else {
        // We are on the first step of the wizard
        return '';
      }
    } else {
      //we move forward
      if ( $level_before != 'used'){
        // get next sibling by ignoring sub levels, otherwise we will stay in this sublevel
        return saw_wizard_get_neightbour($tree, $new_path, $level_before, $direction, true);
      } else {
        //we are on the last step of the wizard 
        return '';
      }
    }
  }
  
  
}

/*
 * returns the array of traget_level with the path /level1/level2/.../target_level from a tree
 */
function saw_get_path($tree, $path){
  // make path string to array of path nodes
  $levels = explode('/',$path);
  array_shift($levels);

  // we are on top level so return whole tree
  if($levels[0] ==''){
    return $tree;
  }
  
  $level = $tree;
  for ($l=0; $l< count($levels);$l++) {
    
    if($l ==0 ) {
      $level = $level[$levels[$l]];
    } else {
      $level = $level['substeps'][$levels[$l]];
    }
  }
  
  return $level;
}




// sort function for sorting steps
function saw_wizard_sort_steps($step1, $step2){
    return $step1['weight'] - $step2['weight'];
}




// create the wizard nav
function saw_wizard_create_nav($pathpattern, $wizard, $active_path, $route_params, $mode = 'edit'){
  $entries=[];
  // get the steps in the corect order
  if('edit' == $mode) {
    $navtree = saw_wizard_create_nav_levels($pathpattern, $wizard, $active_path, $route_params);
  } else if ('view' == $mode) {
   $navtree = saw_wizard_create_view_nav_levels($pathpattern, $wizard, $active_path, $route_params);
  }
  return $navtree;
}




/*
 * create nav levels for editing 
 */
function saw_wizard_create_nav_levels($pathpattern, $level, $active_path,$route_params){

  $active_levels = explode('/', $active_path);
  
  foreach($level as $key => $entry){
    if($key != 'default'){
      $mode = '.'.$key;
    } else {
      $mode = '';
    }

    if(in_array($key, $active_levels)){
      $class = array('in-path');
    } else {
      $class = array('inactive');
    }
    if(isset($entry['substeps'])) {
      $class[] = 'has-substeps';
      $class[] = 'open';
      // this level has sub levels
      $entries[] = array(
        // top level entry
        array(
          '#type'=> 'html_tag', 
          '#tag'=> 'div',
          //'#value'=> $entry['title'],
          //'#attributes'=>array('href'=>str_replace('{step}',$key,$pathpattern),),
          array(
            '#type'=> 'html_tag', 
            '#tag'=> 'span',
            //'#value'=> $entry['title'],
            '#attributes'=>array('class' => 'open-toggle',),
          ),
          array(
            '#type'=> 'html_tag', 
            '#tag'=> 'a',
            '#value'=> $entry['title'],
            '#attributes'=>array('href'=>Url::fromRoute($pathpattern.$mode,$route_params)->toString(),),
          ),
        ),
        // sub nav
        array(
          '#theme' => 'item_list',
          '#list_type' => 'ul',
          //'#title' => 'Test',
          '#items' => saw_wizard_create_nav_levels($pathpattern,$entry['substeps'],$active_path,$route_params),
          '#attributes' => ['class' => 'wizard-sublevel'],
        ),
        '#wrapper_attributes'=>array('class' => $class,),
    );
    
    } else {
      // this level has no sub levels
      $entries[] = array(
        '#type'=> 'html_tag',
        '#tag'=> 'a',
        '#value'=> $entry['title'],
        '#attributes'=>array('href'=>Url::fromRoute($pathpattern.$mode,$route_params)->toString(),),
        '#wrapper_attributes'=>array('class' => $class,),
      );
    }
  }

  return $entries;
}

/*
 * create nav levels for viewing
 */
function saw_wizard_create_view_nav_levels($pathpattern, $level, $active_path,$route_params){

  $active_levels = explode('/', $active_path);
  
  foreach($level as $key => $entry){
    if($key != 'default'){
      $route_params['view_mode'] = $key;
      $link = str_replace('//', '/',Url::fromRoute($pathpattern, $route_params)->toString());
    } else {
      $link = str_replace('//','/',Url::fromRoute('entity.'.$route_params['entity_type'].'.canonical', array($route_params['entity_type'] => $route_params['entity_id']))->toString());
    }

    if(in_array($key, $active_levels)){
      $class = array('in-path');
    } else {
      $class = array('inactive');
    }
    if(isset($entry['substeps'])) {
      $class[] = 'has-substeps';
      $class[] = 'open';
      // this level has sub levels

      $entries[] = array(
        // top level entry
        array(
          '#type'=> 'html_tag', 
          '#tag'=> 'div',
          //'#value'=> $entry['title'],
          //'#attributes'=>array('href'=>str_replace('{step}',$key,$pathpattern),),
          array(
            '#type'=> 'html_tag', 
            '#tag'=> 'span',
            //'#value'=> $entry['title'],
            '#attributes'=>array('class' => 'open-toggle',),
          ),
          array(
            '#type'=> 'html_tag', 
            '#tag'=> 'a',
            '#value'=> $entry['title'],
            '#attributes'=>array('href'=>'/'.$link,),
          ),
        ),
        // sub nav
        
        array(
          '#theme' => 'item_list',
          '#list_type' => 'ul',
          //'#title' => 'Test',
          '#items' => saw_wizard_create_view_nav_levels($pathpattern,$entry['substeps'],$active_path,$route_params),
          '#attributes' => ['class' => 'wizard-sublevel'],
        ),
        '#wrapper_attributes'=>array('class' => $class,),
    );
    
    } else {
      // this level has no sub levels
      $entries[] = array(
        '#type'=> 'html_tag',
        '#tag'=> 'a',
        '#value'=> $entry['title'],
        '#attributes'=>array('href'=> $link,),
        '#wrapper_attributes'=>array('class' => $class,),
      );
    }
  }

  return $entries;
}

// redirect to previous step
function saw_wizard_prev($form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  
  if($form_state->has('wizard_prev')) {
    // we are inside of a wizard
    $wizard_prev = $form_state->get('wizard_prev');
  }
  
  if ($entity->id()) {
    // we have a node id so redirect to step defined in wizard
    if ($wizard_prev) {
      $form_state->setRedirect(
        $wizard_prev,
        [$entity->getEntityTypeId() => $entity->id()]
      );
    }
  }
}

//redirect to next step
function saw_wizard_next($form, FormStateInterface $form_state) {

  $entity = $form_state->getFormObject()->getEntity();
  if($form_state->has('wizard_next')) {
    // we are inside of a wizard
    $wizard_next = $form_state->get('wizard_next');
  }
  
  if ($entity->id()) {
    // we have a node id so redirect to step defined in wizard
    if ($wizard_next) {
      $form_state->setRedirect(
        $wizard_next,
        [$entity->getEntityTypeId() => $entity->id()]
      );
    }
  }
}

// redirect to spezified step
function saw_wizard_node_form_submit($form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  if($form_state->has('wizard')) {
    // we are inside of a wizard
    $wizard = $form_state->get('wizard');
  }
  
  if ($entity->id()) {
    // we have a node id so redirect to step defined in wizard
    if ($wizard) {
      $form_state->setRedirect(
        'entity.node.edit_form.'.$wizard,
        [$entity->getEntityTypeId() => $entity->id()]
      );
    }
  }
}


// save data on ajax call inspired by core/lib/Drupal/core/EntityEntityFprm.php
function saw_wizard_save_ajax($form, FormStateInterface $form_state) {
  
  $step=$form_state->get('wizard');
  // Load the node and get changed form element
  $node_id = $form_state->getFormObject()->getEntity()->id();
  $node = Node::load($node_id); 
  
  $form_state->cleanValues();
  $values = $form_state->getValues();
  
  try {
    if ($node instanceof EntityWithPluginCollectionInterface) {
      // Do not manually update values represented by plugin collections.
      $values = array_diff_key($values, $node->getPluginCollections());
    }
    
    foreach ($values as $key => $value) {
      if($node->hasField($key)) {
        $node->set($key, $value);
      }
    }
    
    // Invoke all specified builders for copying form values to entity
      // properties.
      if (isset($form['#entity_builders'])) {
        foreach ($form['#entity_builders'] as $function) {
          call_user_func_array($form_state->prepareCallback($function), [$node->getEntityTypeId(), $node, &$form, &$form_state]);
        }
      }
    
    $node->save();
    $resultmessage = '<div class="messages__wrapper layout-container"><div role="contentinfo" aria-label="Status message" class="messages messages--status"><h2 class="visually-hidden">Status message</h2>'.t("Step $step saved").'</div></div>';
    
  } catch(Exception $e) {
  $resultmessage = '<div class="messages__wrapper layout-container"><div role="alert" aria-label="Error message" class="messages messages--error"><h2 class="visually-hidden">Error message</h2>'.t("Step $step not saved due to Error".$e->getMessage()).'</div></div>';
  
  }



  //$node = $form_state->getFormObject()->getEntity()->toArray();
  $response = new AjaxResponse();
  //$form_state->setProcessInput();
  $response->addCommand(new insertCommand('.region-highlighted', $resultmessage));
  return $response; 
}

function saw_wizard_copyFormValuesToEntity(EntityInterface $entity, array $form, FormStateInterface $form_state) {
    $values = $form_state->getValues();

    if ($this->entity instanceof EntityWithPluginCollectionInterface) {
      // Do not manually update values represented by plugin collections.
      $values = array_diff_key($values, $this->entity->getPluginCollections());
    }

    // @todo: This relies on a method that only exists for config and content
    //   entities, in a different way. Consider moving this logic to a config
    //   entity specific implementation.
    foreach ($values as $key => $value) {
      $entity->set($key, $value);
    }
}

// put all elements into the children variable so we can access them in a twig file
function saw_wizard_preprocess_form (&$variables){
  $variables['children']=$variables['element'];
}


/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function saw_wizard_theme_suggestions_page_alter(array &$suggestions, array $variables) {

  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    $content_type = $node->bundle();
    $suggestions[] = 'page__'.$content_type;
  }
}

function saw_wizard_theme_suggestions_form_alter(&$suggestions, array $variables) {
  $suggestions[] = 'form__node_wizard_base';
}


